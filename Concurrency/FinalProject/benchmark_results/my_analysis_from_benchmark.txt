For the benchmark of 10 URLS, threading came out as fastest followed by multiprocessing then asyncio. Based on theory, this is quite off since of I/O bound tasks asyncio is known for light weight and deal very well with I/O bound tasks, but here in small scale of 10 urls the overhead of aiohttp and event loop stuff for asyncio is too heavy while thread won because of no process bootup and no heavy overhead. Multiprocessing also dealt with overhead of spawning processes. But for 100 URLS things got real very quick, asyncio came out fastest being around twice as fast as threading and 3 times faster than multiprocessing, this is thanks to the nature of single thread and the I/O bound tasks. Overview, most successes in each benchmark are the same since certain websites block automation and bots stuff. In conclusion, for I/O bound tasks, threading and asyncio are very efficient but if we talking of large scale I/O tasks like downloading web and waiting tasks, it's best for asyncio while for heavy CPU tasks then it will be multiprocessing since it spawns processes to divide and calculate the workload used in rendering images, videos and other CPU intensive tasks.